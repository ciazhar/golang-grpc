// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import golang "github.com/ciazhar/golang-grpc/grpc/generated/golang"
import mock "github.com/stretchr/testify/mock"
import rest "github.com/ciazhar/golang-grpc/common/rest"

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *UserUseCase) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: param
func (_m *UserUseCase) Fetch(param rest.Param) ([]golang.User, error) {
	ret := _m.Called(param)

	var r0 []golang.User
	if rf, ok := ret.Get(0).(func(rest.Param) []golang.User); ok {
		r0 = rf(param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]golang.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(rest.Param) error); ok {
		r1 = rf(param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *UserUseCase) GetByID(id string) (golang.User, error) {
	ret := _m.Called(id)

	var r0 golang.User
	if rf, ok := ret.Get(0).(func(string) golang.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(golang.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: req
func (_m *UserUseCase) Store(req *golang.User) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(*golang.User) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: req
func (_m *UserUseCase) Update(req *golang.User) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(*golang.User) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
